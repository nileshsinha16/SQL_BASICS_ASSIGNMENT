#### WINDOWS FUNCTION #####
USE SAKILA;
## Q1, Rank the customers based on the total amount they've spent on rentals.
## CODE -->
SELECT 
    c.first_name AS Customer_First_Name,
    c.last_name AS Customer_Last_Name,
    SUM(p.amount) AS Total_Spent,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS Rank_NO
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
JOIN rental r ON p.rental_id = r.rental_id
GROUP BY c.customer_id
ORDER BY Rank_NO;

##Q2, Calculate the cumulative revenue generated by each film over time.
## CODE -->
SELECT 
    f.title AS Film_Title,
    r.rental_date AS Rental_Date,
    SUM(p.amount) AS Revenue_Per_Rental,
    SUM(SUM(p.amount)) OVER (PARTITION BY f.film_id ORDER BY r.rental_date) AS Cumulative_Revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY f.film_id, r.rental_date
ORDER BY f.title, r.rental_date;

##Q3, Determine the average rental duration for each film, considering films with similar lengths.
## CODE -->
SELECT 
    CASE 
        WHEN f.length BETWEEN 0 AND 60 THEN '0-60 minutes'
        WHEN f.length BETWEEN 61 AND 120 THEN '61-120 minutes'
        WHEN f.length BETWEEN 121 AND 180 THEN '121-180 minutes'
        ELSE '181+ minutes'
    END AS Film_Length_Range,
    AVG(f.rental_duration) AS Average_Rental_Duration
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY Film_Length_Range
ORDER BY Film_Length_Range;

##Q6, Find the monthly revenue trend for the entire rental store over time.
## CODE -->
 SELECT 
    EXTRACT(YEAR FROM p.payment_date) AS Year,
    EXTRACT(MONTH FROM p.payment_date) AS Month,
    SUM(p.amount) AS Monthly_Revenue
FROM payment p
GROUP BY 
    EXTRACT(YEAR FROM p.payment_date),
    EXTRACT(MONTH FROM p.payment_date)
ORDER BY Year, Month;

##Q8, Calculate the running total of rentals per category, ordered by rental count.
 ## CODE -->
select * from  rental;
WITH CategoryRentalCounts AS (
    SELECT 
        c.name AS Category_Name,
        COUNT(r.rental_id) AS Rental_Count
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN rental r ON f.last_update = r.last_update
    GROUP BY c.name
)
SELECT 
    Category_Name,
    Rental_Count,
    SUM(Rental_Count) OVER (ORDER BY Rental_Count DESC) AS Running_Total
FROM CategoryRentalCounts
ORDER BY Rental_Count DESC;

##Q10, Identify the top 5 months with the highest revenue and display the revenue generated in each month.
 ## CODE -->
SELECT
    TO_CHAR(p.payment_date, 'YYYY-MM') AS Month_Year, 
    SUM(p.amount) AS Total_Revenue                    
FROM payment p
GROUP BY TO_CHAR(p.payment_date, 'YYYY-MM')               
ORDER BY Total_Revenue DESC                               
FETCH FIRST  5  ROWS ONLY;     