------ Function Question -----
use sakila;
## Q1, Retrieve the total number of rentals made in the Sakila database. Hint: Use the COUNT() function.
## CODE --> 
SELECT COUNT( inventory_id ) as Total_Num_Of_Rent
FROM rental
WHERE return_date IS NULL;

## Q2, Find the average rental duration (in days) of movies rented from the Sakila database. Hint: Utilize the AVG() function.
## CODE -->
select * from film;
SELECT title,
avg( rental_duration) as Avg_Of_Rent
FROM film
group by title;

##Q3. Display the first name and last name of customers in uppercase. Hint: Use the UPPER () function.
## CODE -->
select upper(first_name) as UPPER_FAST_NAME,
upper(last_name) as UPPER_LAST_NAME
FROM actor;

## Q4. Extract the month from the rental date and display it alongside the rental ID. Hint: Employ the MONTH() function.
## CODE -->
select rental_id, rental_date,
month(rental_date) as rental_month
from rental;

##Q5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals). Hint: Use COUNT () in conjunction with GROUP BY.
## CODE -->
select * from rental;
SELECT customer_id,
count(inventory_id) as Count_Of_Rent
FROM rental
group by customer_id;

## Q6. Find the total revenue generated by each store. Hint: Combine SUM() and GROUP BY.
## CODE -->
#(Orders is table name) 
SELECT customer_id, SUM(total_price) AS total_revenue 
FROM orders  #(Orders is table name)
WHERE order_date BETWEEN ‘2022–01–01’ AND ‘2022–01–31’ 
GROUP BY customer_id;
## ---OR--- ###
select * from film;
select * from film_category;
select * from rental;

##Q7, Determine the total number of rentals for each category of movies. Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.
## CODE -->
use sakila;
SELECT 
    c.name AS Category_Name,
    COUNT(r.rental_id) AS Total_Rentals
FROM film_category fc
JOIN film f ON fc.film_id = f.film_id
JOIN rental r ON f.last_update = r.last_update
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY Total_Rentals DESC;

##Q8, Find the average rental rate of movies in each language. Hint: JOIN film and language tables, then use AVG () and GROUP BY.
## CODE -->
select * from film;
select * from language;
SELECT l.name AS Language_Name,
    AVG(f.length) AS Average_Film_Length
FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name
ORDER BY Average_Film_Length DESC;

## Q9, Display the title of the movie, customer s first name, and last name who rented it. Hint: Use JOIN between the film, inventory, rental, and customer tables.
## CODE -->
SELECT 
    f.title AS Film_Title,
    c.first_name AS Customer_First_Name,
    c.last_name AS Customer_Last_Name,
    r.rental_date AS Rental_Date
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id
ORDER BY r.rental_date DESC;

##Q10, Retrieve the names of all actors who have appeared in the film "Gone with the Wind." Hint: Use JOIN between the film actor, film, and actor tables.
## CODE -->
SELECT 
    a.first_name AS Actor_First_Name,
    a.last_name AS Actor_Last_Name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.title = 'Gone with the Wind';

##Q11.  Retrieve the customer names along with the total amount they've spent on rentals. Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
## CODE -->
SELECT 
    c.first_name AS Customer_First_Name,
    c.last_name AS Customer_Last_Name,
    SUM(p.amount) AS Total_Spent
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id
ORDER BY Total_Spent DESC;

##Q12, List the titles of movies rented by each customer in a particular city (e.g., 'London'). Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
## CODE -->
SELECT 
    c.first_name AS Customer_First_Name,
    c.last_name AS Customer_Last_Name,
    ci.city as City_Name,
    f.title AS Film_Title
FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE ci.city = 'London'
GROUP BY c.customer_id, f.title
ORDER BY c.first_name, c.last_name, f.title;

##Q13, Display the top 5 rented movies along with the number of times they've been rented. Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.
## CODE -->
SELECT 
    f.title AS Film_Title,
    COUNT(r.rental_id) AS Rental_Count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY Rental_Count DESC
LIMIT 5;

##Q14, Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
## CODE -->
SELECT 
    c.first_name AS Customer_First_Name,
    c.last_name AS Customer_Last_Name,
        c.store_id as Store_ID 
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
WHERE i.store_id IN (1, 2)
GROUP BY c.customer_id
HAVING COUNT(DISTINCT i.store_id) = 2;


