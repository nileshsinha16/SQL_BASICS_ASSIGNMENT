USE SAKILA;
##Q5. CTE Basics:
 a. Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from the actor and film_actor tables.
## CODE --> 
WITH ActorFilmCounts AS (
    SELECT  a.actor_id,
        CONCAT(a.first_name, ' ', a.last_name) AS actor_name,
        COUNT(fa.film_id) AS film_count
    FROM actor a
    JOIN  film_actor fa ON a.actor_id = fa.actor_id
    GROUP BY  a.actor_id, a.first_name, a.last_name
)
SELECT  actor_name, film_count
FROM ActorFilmCounts
ORDER BY  film_count DESC;

##Q6. CTE with Joins: 
a. Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate.
## CODE --> 

WITH FilmLanguageDetails AS (
    SELECT 
        f.title AS film_title,
        l.name AS language_name,
        f.rental_rate
    FROM film f
    JOIN language l ON f.language_id = l.language_id
)
SELECT 
    film_title,
    language_name,
    rental_rate
FROM FilmLanguageDetails
ORDER BY film_title;

##Q7. CTE for Aggregation: 
a. Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from the customer and payment tables.
## CODE --> 
WITH CustomerRevenue AS (
    SELECT p.customer_id,
        SUM(p.amount) AS total_revenue
    FROM payment p
    GROUP BY p.customer_id
)
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    cr.total_revenue
FROM CustomerRevenue cr
JOIN customer c ON cr.customer_id = c.customer_id
ORDER BY cr.total_revenue DESC;

##Q8. CTE with Window Functions: 
a. Utilize a CTE with a window function to rank films based on their rental duration from the film table.
## CODE --> 

WITH FilmRentalRank AS (
    SELECT 
        f.film_id,
        f.title,
        f.rental_duration,
        RANK() OVER (ORDER BY f.rental_duration DESC) AS rental_rank
    FROM film f
)
SELECT 
    film_id,
    title,
    rental_duration,
    rental_rank
FROM FilmRentalRank
ORDER BY rental_rank;

##Q9.  CTE and Filtering: 
a. Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer details.
## CODE --> 
WITH CustomerRentalCount AS (
    SELECT p.customer_id,
        COUNT(p.rental_id) AS rental_count
    FROM rental p
    GROUP BY p.customer_id
    HAVING COUNT(p.rental_id) > 2
)
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.address_id,
    crc.rental_count
FROM CustomerRentalCount crc
JOIN customer c ON crc.customer_id = c.customer_id
ORDER BY crc.rental_count DESC;

##Q10. CTE for Date Calculations:
 a. Write a query using a CTE to find the total number of rentals made each month, considering the rental_date from the rental table.
## CODE --> 
WITH MonthlyRentals AS (
    SELECT 
        YEAR(r.rental_date) AS rental_year,
        MONTH(r.rental_date) AS rental_month,
        COUNT(r.rental_id) AS total_rentals
    FROM rental r
    GROUP BY YEAR(r.rental_date), MONTH(r.rental_date)
)
SELECT 
    rental_year,
    rental_month,
    total_rentals
FROM MonthlyRentals
ORDER BY rental_year DESC, rental_month DESC;
